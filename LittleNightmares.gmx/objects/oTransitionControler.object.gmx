<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.StartTransition = 0;
global.CurrentTransition = 0;
global.TransitionSurf = -1;
global.TransitionTime = 0;
global.NewRoom=-1;


Fade_Time3 = shader_get_uniform(shaderCircleTransition, "f_Time");
Circle_Colour1 = shader_get_uniform(shaderCircleTransition, "f_Circle_Colour");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.StartTransition != 0 )
{
    // On a room change, copy the last frame of the game so we can FADE it in....
    global.CurrentTransition = global.StartTransition;
    global.StartTransition = 0;
    
    // If your room/view does not change size, you don't need to delete it each time
    if( surface_exists(global.TransitionSurf) ){
        surface_free(global.TransitionSurf);
        global.TransitionSurf=-1;
    }
    
    // Get the size the transition surface has to be, and create it.
    var w,h;
    w = surface_get_width(application_surface);
    h = surface_get_height(application_surface);
    global.TransitionSurf = surface_create(w,h);

    // Copy application_surface to out transition surface.
    surface_set_target(global.TransitionSurf);
    draw_surface(application_surface,0,0);
    surface_reset_target();

    // We still want it to draw THIS frame....
    application_surface_draw_enable(true);
    room_goto(global.NewRoom);
}
else
{
    if( global.CurrentTransition == 0) {
        // No transition... so always get Studio to draw it.
        application_surface_draw_enable(true);
        return -1;
    }
    else{
        //
        // Transition in process!!
        //
        var alpha = global.TransitionTime/30.0;
        
        // Transition complete?
        if( alpha&gt;=1.0 ){
            global.CurrentTransition = 0;
            global.TransitionTime=0;
        }
        
        // Get the aspect adjusted location (where we need to draw to.
        var pos = application_get_position();
        var xx,yy,ww,hh;
        xx = pos[0];
        yy = pos[1];        
        ww = pos[2]-pos[0];
        hh = pos[3]-pos[1];
        
        // Render current room in the correct location with NO alpha belnding
        // Surfaces have all kinds of alpha values that you don't want when displaying your room.
        draw_enable_alphablend(false);
        draw_surface_stretched(application_surface,xx,yy,ww,hh);
        draw_enable_alphablend(true);

        
                
        
        
        // Now we do specific transition stuff, depending on the kind of transition we've selected
        switch( global.CurrentTransition )
        {

            case    5:          {
                                    shader_set(CircleFadeTransition);
                                    shader_set_uniform_f(Fade_Time4, global.TransitionTime, 0.0, 0.0, 20.0 );       
                                    break;
                                }
          
        }

        
        
        
        // Now we DRAW the fading surface, using the shader provided
        draw_surface_stretched_ext(global.TransitionSurf,xx,yy,ww,hh,c_white,1.0-alpha);
        // Then clear the shader
        shader_reset();
        // Move "time" on...
        global.TransitionTime++;       
        // and finally disable the auto-rendering of the application surface
        application_surface_draw_enable(false);
    }
       
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
